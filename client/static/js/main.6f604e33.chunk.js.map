{"version":3,"sources":["components/CityTextBar/CityTextBar.jsx","components/CardsCircleDisplay/CardsCircleDisplay.jsx","App.js","serviceWorker.js","index.js"],"names":["CityTextBar","props","useState","location","setLocation","handleSearch","getWeatherData","style","display","justifyContent","width","flexWrap","margin","alignItems","alignContent","textAlign","zIndex","fontSize","height","minWidth","flex","value","onChange","e","target","onKeyDown","key","allowClear","placeholder","defaultValue","onClick","CardsCircleDisplay","weatherData","padding","boxShadow","backgroundColor","opacity","flexDirection","fontWeight","color","name","temp","feelsLike","humidity","cloudiness","weatherType","Header","Layout","Footer","Content","App","setWeatherData","errorMsg","setErrorMsg","className","minHeight","axios","get","then","r","data","main","w","Math","floor","feels_like","clouds","all","weather","weatherIcon","icon","catch","console","error","message","Object","keys","length","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6f604e33.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { Button, Input } from 'antd';\n\nexport default function CityTextBar(props) {\n  // findDOMNode is deprecated in StrictMode. findDOMNode was passed an instance of Wave\n  // which is inside StrictMode. This can be imporved by using a Form.Item element\n  // To keep things simple this error is expected to happen.\n  const [location, setLocation] = useState('');\n  const handleSearch = () => {\n    props.getWeatherData(location);\n  };\n  return (\n    <div\n      style={{\n        display: 'flex',\n        justifyContent: 'flex-start',\n        width: '40vw',\n        flexWrap: 'wrap',\n        margin: '48px auto',\n        alignItems: 'center',\n        alignContent: 'center ',\n        textAlign: 'center',\n        zIndex: 2,\n      }}\n    >\n      <Input\n        style={{\n          width: '440px',\n          fontSize: '24px',\n          height: '48px',\n          minWidth: '180px',\n          flex: 80,\n        }}\n        value={location}\n        onChange={(e) => setLocation(e.target.value)}\n        onKeyDown={(e) => {\n          if (e.key === 'Enter') handleSearch();\n        }}\n        allowClear\n        placeholder=\"Enter full city name\"\n        defaultValue=\"\"\n      />\n      <Button\n        style={{\n          fontSize: '20px',\n          height: '48px',\n          flex: 20,\n        }}\n        onClick={handleSearch}\n      >\n        Get Weather\n      </Button>\n    </div>\n  );\n}\n","import React from 'react';\n\nexport default function CardsCircleDisplay(props) {\n  const { weatherData } = props;\n  return (\n    <div\n      style={{\n        margin: '32px auto',\n        zIndex: 2,\n      }}\n    >\n      <div\n        style={{\n          padding: '20px',\n          width: '350px',\n          height: '350px',\n          textAlign: 'center',\n          boxShadow: '0 2px 5px rgba(0,0,0,0.4)',\n          backgroundColor: '#fff',\n          opacity: '57%',\n          zIndex: 2,\n          display: 'flex',\n          flexDirection: 'column',\n        }}\n      >\n        <div>\n          <h1\n            style={{\n              fontSize: 32,\n              fontWeight: 500,\n              color: '#000',\n            }}\n          >\n            {weatherData.name}\n          </h1>\n        </div>\n        <div\n          style={{\n            height: '120px',\n            margin: '-20px 0 0 0',\n          }}\n        >\n          <p\n            style={{\n              fontSize: 84,\n              color: '#000',\n            }}\n          >\n            {weatherData.temp}&#176;\n            <span style={{ fontSize: 64 }}>C</span>\n          </p>\n        </div>\n        <div\n          style={{\n            display: 'flex',\n            flexWrap: 'wrap',\n            justifyContent: 'space-evenly',\n          }}\n        >\n          <div>\n            <p style={{ fontSize: 16, color: '#000' }}>\n              Feels Like: {weatherData.feelsLike}&#176;C\n            </p>\n          </div>\n          <div>\n            <p style={{ fontSize: 16, color: '#000' }}>\n              Humidity: {weatherData.humidity}%\n            </p>\n          </div>\n\n          <div>\n            <p style={{ fontSize: 16, color: '#000' }}>\n              Cloudiness: {weatherData.cloudiness}%\n            </p>\n          </div>\n        </div>\n        <div>\n          <p style={{ fontSize: 25, color: '#000' }}>\n            {weatherData.weatherType}\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React, { useState } from 'react';\nimport axios from 'axios';\nimport './App.css';\nimport { Layout } from 'antd';\nimport CityTextBar from './components/CityTextBar/CityTextBar';\nimport CardsCircleDisplay from './components/CardsCircleDisplay/CardsCircleDisplay';\n\nconst { Header, Footer, Content } = Layout;\n\nfunction App() {\n  const [weatherData, setWeatherData] = useState({});\n  const [errorMsg, setErrorMsg] = useState('');\n  const getWeatherData = (location) => {\n    if (location) {\n      axios\n        .get(`/api/v1/getForecast/${location}`)\n        .then((r) => {\n          const { data } = r;\n          if (data && data.main) {\n            setErrorMsg();\n            const w = {\n              name: data.name,\n              temp: Math.floor(data.main.temp),\n              humidity: Math.floor(data.main.humidity),\n              feelsLike: Math.floor(data.main.feels_like),\n              cloudiness: Math.floor(data.clouds.all),\n              weatherType: data.weather[0].main,\n              weatherIcon: `http://openweathermap.org/img/w/${data.weather[0].icon}.png`,\n            };\n            setWeatherData(w);\n          }\n          if (data === 'Request failed with status code 404')\n            setErrorMsg(`City Not Found ${location}`);\n        })\n        .catch((e) => {\n          console.error(e);\n          setErrorMsg(e.message.data);\n        });\n    }\n  };\n  return (\n    <div className=\"App\">\n      <Layout\n        style={{\n          height: '100vh',\n          minHeight: '760px',\n        }}\n      >\n        <Header\n          style={{\n            color: '#fff',\n            fontSize: '32px',\n            zIndex: 999,\n          }}\n        >\n          Metty\n        </Header>\n        <Content>\n          <Layout>\n            <CityTextBar getWeatherData={getWeatherData} />\n          </Layout>\n          <Layout>\n            {weatherData && Object.keys(weatherData).length > 0 && (\n              <CardsCircleDisplay weatherData={weatherData} />\n            )}\n            {errorMsg && (\n              <div\n                style={{\n                  backgroundColor: '#e83535',\n                  padding: '5px',\n                  minWidth: '250px',\n                  fontSize: '2rem',\n                  color: '#fff',\n                  width: '20vw',\n                  margin: '0 auto',\n                }}\n              >\n                <p>{errorMsg}</p>\n              </div>\n            )}\n          </Layout>\n        </Content>\n        <Footer\n          style={{ zIndex: 999, color: '#ccc', backgroundColor: 'transparent' }}\n        >\n          Created by Ayan Banerjee\n        </Footer>\n      </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"antd/dist/antd.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}